<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context  
        http://www.springframework.org/schema/context/spring-context.xsd  
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
        <context:component-scan base-package="com.pall">  
			<context:include-filter type="regex" expression="com.pall.mts.repository.mapper.*" />
		</context:component-scan>   
       <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" /> 
       <bean id="messageSource"  
        	class="org.springframework.context.support.ResourceBundleMessageSource">  
        	<property name="basenames">
        		<list>
      			</list>
        	</property>
        	<property name="defaultEncoding" value="UTF-8"/>
        	<property name="cacheSeconds" value="60"/>  
    	</bean>
    	
    	<bean id="authInterceptor" class="com.pall.mts.interceptor.AuthInterceptor">  
	    	<property name="noFilterPathSet">  
	        	<set>  
	           		<value>/login</value>  
	            	<value>/getValidCode</value>
	            	<value>/logout</value>   
	        	</set>  
	    	</property>  
		</bean> 
		<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">  
		    <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>  
		    <property name="validationMessageSource" ref="messageSource"/>  
		</bean>  
    	<bean id="dataSource"  name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" primary="true">   
	     <property name="driverClassName" value="${master.mysql.datasource.driverClassName}" /> 
	     <!-- 基本属性 url、user、password -->  
	     <property name="url" value="${master.mysql.datasource.url}" />  
	     <property name="username" value="${master.mysql.datasource.username}" />  
	     <property name="password" value="${master.mysql.datasource.password}" />           
	     <!-- 配置初始化大小、最小、最大 -->  
	     <property name="initialSize" value="1" />  
	     <property name="minIdle" value="1" />   
	     <property name="maxActive" value="20" />      
	     <!-- 配置获取连接等待超时的时间 -->  
	     <property name="maxWait" value="60000" />      
	     <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
	     <property name="timeBetweenEvictionRunsMillis" value="60000" />     
	     <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
	     <property name="minEvictableIdleTimeMillis" value="300000" />       
	     <property name="validationQuery" value="SELECT 'x'" />  
	     <property name="testWhileIdle" value="true" />  
	     <property name="testOnBorrow" value="false" />  
	     <property name="testOnReturn" value="false" />      
	     <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->  
	     <property name="poolPreparedStatements" value="true" />  
	     <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />      
	     <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->  
	     <property name="filters" value="stat" />   
 	</bean>  
	 <!--  
        2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源  
        MyBatis定义数据源,同意加载配置  
    -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource"></property>  
        <property name="mapperLocations" value="${mybatis.mapper.location}"/>   
    </bean>  

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.pall.mts.repository.mapper"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 配置事务特性 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 配置哪些类的方法需要进行事务管理 -->
	<aop:config>
		<aop:pointcut id="AllManagerMethod"
			expression="execution(* com.pall.mts.service.*.handler.*(..))" />
		<aop:advisor advice-ref="txAdvice"
			pointcut-ref="AllManagerMethod" />
	</aop:config>
</beans>